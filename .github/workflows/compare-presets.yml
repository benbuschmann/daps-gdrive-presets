name: Compare Presets to YAML

on:
  push:
    branches: [ main, master ]
    paths:
      - 'presets.js'
      - 'daps2.yml'
  pull_request:
    branches: [ main, master ]
    paths:
      - 'presets.js'
      - 'daps2.yml'
  workflow_dispatch: # Allows manual triggering

jobs:
  compare-presets:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        
    - name: Install dependencies
      run: |
        npm install js-yaml
        
    - name: Compare presets to YAML
      run: |
        cat << 'EOF' > compare.js
        const fs = require('fs');
        const yaml = require('js-yaml');
        
        // Read and parse presets.js
        const presetsContent = fs.readFileSync('presets.js', 'utf8');
        // Extract the presets object using regex (since it's not pure JSON)
        const presetsMatch = presetsContent.match(/window\.gdrivePresets\s*=\s*({[\s\S]*?});/);
        if (!presetsMatch) {
          console.error('Could not parse presets.js');
          process.exit(1);
        }
        
        const presetsObj = eval('(' + presetsMatch[1] + ')');
        
        // Read and parse daps2.yml
        const yamlContent = fs.readFileSync('daps2.yml', 'utf8');
        const yamlData = yaml.load(yamlContent);
        
        // Extract existing IDs from YAML
        const existingIds = new Set();
        if (yamlData.gdrive_list) {
          yamlData.gdrive_list.forEach(item => {
            existingIds.add(item.id);
          });
        }
        
        // Find missing presets
        const missingPresets = [];
        for (const [name, id] of Object.entries(presetsObj)) {
          if (!existingIds.has(id)) {
            missingPresets.push({ name, id });
          }
        }
        
        // Output results
        if (missingPresets.length === 0) {
          console.log('✅ All presets are present in daps2.yml');
        } else {
          console.log('❌ Missing presets in daps2.yml:');
          console.log('');
          missingPresets.forEach(preset => {
            console.log(`Name: ${preset.name}`);
            console.log(`ID: ${preset.id}`);
            console.log('YAML entry:');
            console.log(`  - id: ${preset.id}`);
            console.log(`    location: /posters/${preset.name}`);
            console.log(`    name: ${preset.name}`);
            console.log('');
          });
          
          // Set output for other steps to use
          const output = missingPresets.map(p => `${p.name}: ${p.id}`).join('\n');
          fs.writeFileSync('missing_presets.txt', output);
          
          // Exit with error code to fail the workflow
          process.exit(1);
        }
        EOF
        
        node compare.js
        
    - name: Upload missing presets report
      if: failure()
      uses: actions/upload-artifact@v4
      with:
        name: missing-presets-report
        path: missing_presets.txt
        
    - name: Comment on PR (if applicable)
      if: failure() && github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          
          let comment = '## ❌ Missing Presets in YAML\n\n';
          comment += 'The following presets from `presets.js` are not found in `daps2.yml`:\n\n';
          
          try {
            const missingPresets = fs.readFileSync('missing_presets.txt', 'utf8');
            const lines = missingPresets.split('\n').filter(line => line.trim());
            
            lines.forEach(line => {
              const [name, id] = line.split(': ');
              comment += `### ${name}\n`;
              comment += `- **ID**: \`${id}\`\n`;
              comment += `- **Suggested YAML entry**:\n`;
              comment += '```yaml\n';
              comment += `  - id: ${id}\n`;
              comment += `    location: /posters/${name}\n`;
              comment += `    name: ${name}\n`;
              comment += '```\n\n';
            });
          } catch (error) {
            comment += 'Error reading missing presets file.\n';
          }
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: comment
          });
